require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MailManager::BouncesController, :type => :controller do
  render_views
  routes {MailManager::Engine.routes}

  # This should return the minimal set of attributes required to create a valid
  # MailManager::Bounce. As you add validations to MailManager::Bounce, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:bounce)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:bounce, status: "notastatus")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MailManager::BouncesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all bounces as @bounces" do
      bounce = MailManager::Bounce.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:bounces)).to eq([bounce])
      expect(response.body).to match /Listing Bounces/
    end
    it "orders bounces create date desc" do
      Timecop.travel 2.hours.ago
      bounce = MailManager::Bounce.create! valid_attributes
      Timecop.return
      bounce_new = MailManager::Bounce.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:bounces)).to eq([bounce_new,bounce])
      expect(response.body).to match /Listing Bounces/
    end
  end

  describe "GET #show" do
    it "assigns the requested bounce as @bounce" do
      bounce = MailManager::Bounce.create! valid_attributes
      get :show, {:id => bounce.to_param}, valid_session
      expect(assigns(:bounce)).to eq(bounce)
      expect(response.body).to match /Viewing Bounce/
    end
  end

  describe "PUT #dismiss" do
    it "dismisses a bounce from needing attention" do
      bounce = FactoryGirl.create(:bounce, status: 'needs_manual_intervention')
      put :dismiss, {id: bounce.id}, valid_session
      expect(assigns(:bounce)).to eq(bounce)
      bounce.reload
      expect(bounce.status).to eq 'dismissed'
    end
  end

  describe "PUT #dismiss" do
    it "fails a bounce setting it to 'removed' and failing its email addresses from active subscriptions" do
      contact = FactoryGirl.create(:contact)
      list1 = FactoryGirl.create(:mailing_list)
      list2 = FactoryGirl.create(:mailing_list)
      sub1 = contact.subscribe(list1)
      message = FactoryGirl.create(:message, contact_id: contact.id) 
      bounce = FactoryGirl.create(:bounce, status: 'needs_manual_intervention',
        message_id: message.id
      )
      put :fail_address, {id: bounce.id}, valid_session
      expect(assigns(:bounce)).to eq(bounce)
      bounce.reload
      sub1.reload
      expect(bounce.message.status).to eq('failed')
      expect(sub1.status).to eq('failed_address')
      expect(MailManager::Subscription.count).to eq 1
      expect(bounce.status).to eq 'removed'
    end
  end
end
